import {useEffect, useState} from "react";
import Head from 'next/head'
import {Form, Formik} from 'formik';
import * as Yup from 'yup';
import {signInWithPhoneNumber, RecaptchaVerifier,} from "firebase/auth";
import {auth} from "../firebase/firebaseApp";
import {useRouter} from "next/router";


const PhoneNumberSchema = Yup.object().shape({
    phoneNumber: Yup.string()
        .min(10, 'Too Short!')
        .max(10, 'Too Long!')
        .required('Required'),
});

const OTPSchema = Yup.object().shape({
    otp: Yup.string()
        .min(6, 'Too Short!')
        .max(6, 'Too Long!')
        .required('Required'),
});

export default function Home() {

    const [recaptcha, setRecaptcha] = useState(null)
    const [confirmation, setConfirmation] = useState(null)
    const router = useRouter()

    useEffect(() => {
        const verifier = new RecaptchaVerifier('recaptcha-container', {
                'size': 'invisible'
            },
            auth);
        if (!recaptcha) {
            console.log(verifier.verify().then(() => setRecaptcha(verifier)))
        }
        return () => {
            verifier.clear()
        }
    }, [recaptcha])

    function setupRecaptcha(number) {
        return signInWithPhoneNumber(auth, '+91' + number, recaptcha)
    }

    async function handleGetOTP(phoneNumber) {
        console.log(phoneNumber)
        try {
            const resp = await setupRecaptcha(phoneNumber)
            console.log(resp)
            setConfirmation(resp)
        } catch (e) {
            setConfirmation({})
        }
    }

    async function handleVerifyOTP(otp) {
        try {
            await confirmation.confirm(otp)
            router.push('/tasks')
        } catch (err) {
            console.log(err)

        }
    }


    return (
        <div className={"container"}>
            <Head>
                <title>Tasks App</title>
                <meta name="description" content="Generated by create next app"/>
                <link rel="icon" href="/favicon.ico"/>
            </Head>

            <main className={"main"}>
                <Formik
                    initialValues={{
                        phoneNumber: ''
                    }}
                    onSubmit={values => {
                        const {phoneNumber} = values
                        handleGetOTP(phoneNumber)
                    }}
                    validationSchema={PhoneNumberSchema}
                >{
                    ({values, errors, touched, handleChange, handleBlur, isValid}) => (
                        <Form>
                            <label>Phone Number</label>
                            <input type={"tel"}
                                   name="phoneNumber"
                                   onChange={handleChange}
                                   onBlur={handleBlur}
                                   value={values.phoneNumber}
                            />
                            {errors.phoneNumber && touched.phoneNumber ?
                                <div className={"text-orange-300-500 mt-2"}>{errors.phoneNumber}</div> : null}
                            <button type="submit" disabled={!isValid}>Get OTP</button>
                        </Form>
                    )

                }
                </Formik>
                <div id={"recaptcha-container"} className={"flex justify-center w-full"}/>
                {confirmation &&
                    <Formik
                        initialValues={{
                            otp: ''
                        }}
                        onSubmit={values => {
                            const {otp} = values
                            handleVerifyOTP(otp)
                        }}
                        validationSchema={OTPSchema}
                    >{
                        ({values, errors, touched, handleChange, handleBlur, isValid}) => (
                            <Form>
                                <label>OTP</label>
                                <input type={"text"}
                                       name="otp"
                                       onChange={handleChange}
                                       onBlur={handleBlur}
                                       value={values.otp}
                                />
                                {errors.otp && touched.otp ? <div>{errors.otp}</div> : null}
                                <button type={"submit"} disabled={!isValid}>Verify OTP</button>
                            </Form>
                        )
                    }
                    </Formik>
                }
            </main>
        </div>
    )
}
